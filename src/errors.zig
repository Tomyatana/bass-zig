const c = @cImport({
    @cInclude("bass.h");
});

pub const getErrno = c.BASS_ErrorGetCode;

pub fn getError() BassError {
    const errno = getErrno();
    switch (errno) {
        c.BASS_OK => return BassError.Ok,
        c.BASS_ERROR_MEM => return BassError.MemoryError,
        c.BASS_ERROR_FILEOPEN => return BassError.FileOpenError,
        c.BASS_ERROR_DRIVER => return BassError.DriverError,
        c.BASS_ERROR_BUFLOST => return BassError.LostBufError,
        c.BASS_ERROR_HANDLE => return BassError.HandleError,
        c.BASS_ERROR_FORMAT => return BassError.FormatError,
        c.BASS_ERROR_POSITION => return BassError.PositionError,
        c.BASS_ERROR_INIT => return BassError.InitError,
        c.BASS_ERROR_START => return BassError.StartError,
        c.BASS_ERROR_SSL => return BassError.SSLError,
        c.BASS_ERROR_REINIT => return BassError.ReinitError,
        c.BASS_ERROR_ALREADY => return BassError.AlreadyError,
        c.BASS_ERROR_NOTAUDIO => return BassError.NotAudioError,
        c.BASS_ERROR_NOCHAN => return BassError.NoChannelError,
        c.BASS_ERROR_ILLTYPE => return BassError.IllTypeError,
        c.BASS_ERROR_ILLPARAM => return BassError.IllParamError,
        c.BASS_ERROR_NO3D => return BassError.No3DError,
        c.BASS_ERROR_NOEAX => return BassError.NoEAXError,
        c.BASS_ERROR_DEVICE => return BassError.DeviceError,
        c.BASS_ERROR_NOPLAY => return BassError.NoPlayError,
        c.BASS_ERROR_FREQ => return BassError.FrequencyError,
        c.BASS_ERROR_NOTFILE => return BassError.NotFile,
        c.BASS_ERROR_NOHW => return BassError.NoHardwareError,
        c.BASS_ERROR_EMPTY => return BassError.EmptyError,
        c.BASS_ERROR_NONET => return BassError.NoNetError,
        c.BASS_ERROR_CREATE => return BassError.CreateError,
        c.BASS_ERROR_NOFX => return BassError.NoFXError,
        c.BASS_ERROR_NOTAVAIL => return BassError.NotAvailable,
        c.BASS_ERROR_DECODE => return BassError.DecodeError,
        c.BASS_ERROR_DX => return BassError.DXError,
        c.BASS_ERROR_TIMEOUT => return BassError.TimeoutError,
        c.BASS_ERROR_FILEFORM => return BassError.FileFormError,
        c.BASS_ERROR_SPEAKER => return BassError.SpeakerError,
        c.BASS_ERROR_VERSION => return BassError.VersionError,
        c.BASS_ERROR_CODEC => return BassError.CodecError,
        c.BASS_ERROR_ENDED => return BassError.EndedError,
        c.BASS_ERROR_BUSY => return BassError.Busy,
        c.BASS_ERROR_UNSTREAMABLE => return BassError.Unstreamable,
        c.BASS_ERROR_PROTOCOL => return BassError.ProtocolError,
        c.BASS_ERROR_DENIED => return BassError.Denied,
        else => return BassError.UnknownError,
    }
}

pub const BassError = error{
    UnknownError,
    Ok,
    MemoryError,
    FileOpenError,
    DriverError,
    LostBufError,
    HandleError,
    FormatError,
    PositionError,
    InitError,
    StartError,
    SSLError,
    ReinitError,
    AlreadyError, // would be great if it had a name that explains it better
    NotAudioError,
    NoChannelError,
    IllTypeError,
    IllParamError,
    No3DError,
    NoEAXError,
    DeviceError,
    NoPlayError,
    FrequencyError,
    NotFile,
    NoHardwareError,
    EmptyError,
    NoNetError,
    CreateError,
    NoFXError,
    NotAvailable,
    DecodeError,
    DXError,
    TimeoutError,
    FileFormError,
    SpeakerError,
    VersionError,
    CodecError,
    EndedError,
    Busy,
    Unstreamable,
    ProtocolError,
    Denied,
};
